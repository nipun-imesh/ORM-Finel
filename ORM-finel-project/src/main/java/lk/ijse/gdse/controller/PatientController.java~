package lk.ijse.gdse.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import lk.ijse.gdse.bo.BOFactory;
import lk.ijse.gdse.bo.custom.PatientBO;
import lk.ijse.gdse.dto.PatientsDTO;
import lk.ijse.gdse.dto.UsersDTO;
import lk.ijse.gdse.dto.tm.PAtientTM;
import lk.ijse.gdse.dto.tm.UsetTM;

import java.net.URL;
import java.sql.Date;
import java.util.ArrayList;
import java.util.ResourceBundle;

public class PatientController implements Initializable {

    @FXML
    private DatePicker DATSelectBox;

    @FXML
    private Label LBPId;

    @FXML
    private TableColumn<PAtientTM, String> TBCContact;

    @FXML
    private TableColumn<PAtientTM, String> TBCName;

    @FXML
    private TableColumn<PAtientTM, Date> TBCRegDate;

    @FXML
    private TableColumn<PAtientTM, String> TBCid;

    @FXML
    private TableView<PAtientTM> TBLPatient;

    @FXML
    private TextField TXTContactNumber;

    @FXML
    private TextField TXTUserName;

    @FXML
    private Button addButton;

    @FXML
    private Button restBUT;


    @FXML
    private Button deleteButton;

    @FXML
    private Button updateButton;

    AlertController alertController = new AlertController();
    PatientBO patientBO = (PatientBO) BOFactory.getInstance().getBO(BOFactory.BOType.PATIENT);

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        TBCid.setCellValueFactory(new PropertyValueFactory<>("id"));
        TBCName.setCellValueFactory(new PropertyValueFactory<>("name"));
        TBCContact.setCellValueFactory(new PropertyValueFactory<>("contact"));
        TBCRegDate.setCellValueFactory(new PropertyValueFactory<>("regDate"));

        try {
            getAll();
            getPatientId();
            TBLPatient.refresh();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @FXML
    void addOnaction(MouseEvent event) throws Exception {
        String id = LBPId.getText();
        String name = TXTUserName.getText();
        String contact = TXTContactNumber.getText();
        Date date = Date.valueOf(DATSelectBox.getValue());



        if(id.isEmpty() || name.isEmpty() || contact.isEmpty() || date.equals(null)){
            alertController.INFORMATIONALERT("INFORMATION","Empty Fields" , Alert.AlertType.INFORMATION);
        } else {
            patientBO.save(new PatientsDTO(id,name,contact,date));

        }
        alertController.INFORMATIONALERT("INFORMATION","Save Successfully" , Alert.AlertType.INFORMATION);
        getAll();
    }

    @FXML
    void deleteOnAction(MouseEvent event) throws Exception {
        if(TBLPatient.getSelectionModel().getSelectedItem() != null){
            String id = LBPId.getText();
            patientBO.delete(id);
        }
        alertController.INFORMATIONALERT("INFORMATION","Delete Successfully" , Alert.AlertType.INFORMATION);
        getAll();
    }

    @FXML
    void upDateOnaction(MouseEvent event) throws Exception {
        if(TBLPatient.getSelectionModel().getSelectedItem() != null){
            String id = LBPId.getText();
            String name = TXTUserName.getText();
            String contact = TXTContactNumber.getText();
            String date = DATSelectBox.getValue().toString();
            patientBO.update(new PatientsDTO(id,name,contact,date));
        }else {
            alertController.INFORMATIONALERT("INFORMATION","Select User" , Alert.AlertType.INFORMATION);
        }
        alertController.INFORMATIONALERT("INFORMATION","Update Successfully" , Alert.AlertType.INFORMATION);
        getAll();
    }

    void getAll() throws Exception {
        ArrayList<PatientsDTO> customerDTOS = (ArrayList<PatientsDTO>) patientBO.getAll();
        ObservableList<PAtientTM> customerTMS = FXCollections.observableArrayList();

        for ( PatientsDTO customerDTO : customerDTOS) {
            customerTMS.add(new PAtientTM(
                    customerDTO.getId(),
                    customerDTO.getName(),
                    customerDTO.getContact(),
                    customerDTO.getRegDate()
            ));

        }
        TBLPatient.setItems(customerTMS);
    }


    @FXML
    void petientSelectOnAction(MouseEvent event) {
        if (TBLPatient.getSelectionModel().getSelectedItem() == null) {

            alertController.INFORMATIONALERT("INFORMATION", " First Select User", Alert.AlertType.INFORMATION);
        } else if (TBLPatient.getSelectionModel().getSelectedItem() != null) {
            PAtientTM selectedItem = TBLPatient.getSelectionModel().getSelectedItem();

            LBPId.setText(selectedItem.getId());
            TXTUserName.setText(selectedItem.getName());
            TXTContactNumber.setText(selectedItem.getContact());
            DATSelectBox.setValue(selectedItem.getRegDate().toLocalDate());

            updateButton.setDisable(false);
        } else {
            updateButton.setDisable(true);
//            alertController.INFORMATIONALERT("INFORMATION", "Select User", Alert.AlertType.INFORMATION);
        }
    }

    @FXML
    void reSetOnAction(MouseEvent event) throws Exception {
        LBPId.setText("");
        TXTUserName.setText("");
        TXTContactNumber.setText("");
        DATSelectBox.setValue(null);

        getPatientId();
    }

    void getPatientId() throws Exception {
        String id = patientBO.getPatientId();
        LBPId.setText(id);
    }
}
